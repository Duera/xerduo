[{"title":"图片剪裁上传 imgUpload","date":"2017-09-10T17:20:19.000Z","path":"2017/09/11/imgUpload/","text":"图片剪裁上传，可移动图片位置，鼠标滚动可放大缩小图片 Github地址 #imgBox { position: relative; cursor: move; -moz-user-select: none; -o-user-select: none; -khtml-user-select: none; -webkit-user-select: none; -ms-user-select: none; user-select: none; } #imgBox canvas{ position: absolute; top: 50%; left: 50%; transform:translate(-50%,-50%); } 保存预览 function saveCallBack(base64){ $(\"#base64 img\").attr(\"src\",base64); //最终把此base64传给后端 /** $.ajax({ data: { base64: base64 } }) **/ } // 初始化 var imgupload=new Imgupload({ uploadInputBtn:\"#inputBtn\", previewBox:\"#previewImgBox\", imgBox:\"#imgBox\", //容纳图片的容器大小设置 imgBoxSize:350, //图片剪裁区域大小校设置 imgCropSize:200, //剪裁图片预览容器大小 previewBoxSize:200 },saveCallBack); 调用1234567891011121314151617181920212223 function saveCallBack(base64)&#123; $(\"#base64 img\").attr(\"src\",base64); //最终把此base64传给后端 /** $.ajax(&#123; data: &#123; base64: base64 &#125; &#125;) **/ &#125;// 初始化 var imgupload=new Imgupload(&#123; uploadInputBtn:\"#inputBtn\", previewBox:\"#previewImgBox\", imgBox:\"#imgBox\", //容纳图片的容器大小设置 imgBoxSize:350, //图片剪裁区域大小校设置 imgCropSize:200, //剪裁图片预览容器大小 previewBoxSize:200 &#125;,saveCallBack);","tags":[{"name":"技术","slug":"技术","permalink":"http://xerduo.com/tags/技术/"}]},{"title":"Flex弹性布局","date":"2017-05-08T13:10:03.000Z","path":"2017/05/08/Flex弹性布局/","text":"布局的传统解决方案，基于盒状模型，依赖 displaSy 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，Flex 布局或将成为未来布局的首选方案。 使用说明： .flex{ box-shadow: 1px 1px rgba(78, 78, 78, 0.1) inset, -1px -1px rgba(78, 78, 78, 0.1) inset; text-align: center; background: #f8ffed; } .flex[class*=\"item\"],.bg-flex{ line-height: 40px; box-shadow: 1px 1px rgba(78, 78, 78, 0.1) inset, -1px -1px rgba(78, 78, 78, 0.1) inset; background: #edf8ff; } .bg-flex{ width: 25%; } #left-menu{ position:absolute;left:50%;width:60px;margin-left: -30px; } #left-menu>div{ position: fixed; text-align: center; } #left-menu>div>h3{ display: block; padding: 5px 20px; margin-left:-20px; border:1px solid #e7e7e7; border-radius:8px 0 8px 0; cursor: pointer; } #left-menu>div>h3:hover{ background: #efefef; border-radius:0 8px 0 8px; } #left-menu-h{ height: 4480px; } #con-right i{ display: block; height: 36px; width: 36px; background: #ffcfcf; position: fixed; margin-left: -33px; border-radius:50%; margin-top: 102px; box-shadow: 0 2px 6px -2px #385a68; z-index: 99; border: 8px solid #fff; } #con-right{ margin-left: 45px; } .head-bg{ background: #f0f0f0; } .conbg{ background: #EDF8FF; } .m-t-10 { margin-top: 10px !important; } .h-220 { height: 220px !important; overflow: hidden !important; } .border { border: 1px solid #efefef !important; } .bd-6 { -moz-border-radius: 6px !important; -webkit-border-radius: 6px !important; border-radius: 6px !important; } .p-15 { padding: 15px !important; } .p-0{ padding:0 !important; } .list-unstyled::before{ display:none !important; } .m-b-20 { margin-bottom: 20px !important; } .c-blue { color: #00A2D9; } .m-r-5 { margin-right: 5px !important; } .panel p{ margin:0; } .panel-content{ margin-bottom:30px; } .h-100 { height: 100px !important; overflow: hidden !important; } .w-100{ width:100%; } .h-100p{ height:100%; } p{ margin:0 !important; } item-1 item-1 item-2 item-7 item-1 item-1 item-1 item-1 item-1 item-1 item-1 item-1 item-1 item-1 item-2 item-6 item-2 item-3 item-3 item-4 item-2 item-3 item-5 布局容器有两种：1、flex-row：容器里的[栅格]以横向排列。 2、flex-col：容器里的[栅格]以纵向排列。3、综合使用flex-row、flex-col可以实现各种复杂布局。 [栅格]宽度、高度不是固定百分比，可以无限切分下去。特别说明： 1、item-1~item-9 由小到大 表示用于切分比例的类。 2、item-1~item-9任意一个都可以重复使用，但重复使用时其所占高度或宽度百分比都将重新计算，最后都能使他们能完全填充整个容器。 设为flex布局以后，子元素的float、clear和vertical-align属性将失效。Flex原理教程 用法: 理解并使用item-*这个class应用在[栅格]上，用于切分容器。 只使用一个item-*时，占容器宽度100%（建议统一使用item-1填充整个宽度） 使用两个相同item-*时，各占容器宽度50%。 （以此类推，可根据需要无限切分下去） 使用不同item-*时，所占比例 = 当前item-*数字大小 / 所有item-*数字之和。 item-1,占 1/13 item-5,占 5/13 item-7,占 7/13 order-*（order-1~order-9）这个class应用在[栅格]上，指定对应[栅格]排序。数值越大排序越靠后。 order-4 order-3 order-2 order-1 flex-mid 垂直居中 flex-center 水平居中 这两个class应用在[容器]上时，所有子元素都会垂直或水平居中。也可以单独应用在子元素上，使特定子元素居中对齐。 水平居中 垂直居中 水平、垂直居中 水平、垂直居中 flex-left 左对齐 flex-right 右对齐 这两个class应用在[容器]上时，所有子元素都会左右对其。也可以单独应用在子元素上。 左对齐 左对齐 右对齐 右对齐 右对齐 左对齐 右对齐 flex-top 顶部对齐 flex-bottom 底部对齐 这两个class应用在[容器]上时，所有子flex-item都会上下对其。也可以单独应用在[栅格]上。 底部对齐 顶部对齐 底部对齐 flex-around 分散排列 这个class应用在[容器]上。每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 分散排列 分散排列 分散排列 flex-between 两端对齐 这个class应用在[容器]上。两端对齐，项目之间的间隔都相等。 两端对齐 两端对齐 两端对齐 响应式布局: 提供基础的响应式功能，当分辨率小于某个阈值时，可以指定： [容器]从横向排列变为竖向排列。 隐藏指定[栅格] 显示指定[栅格] flex-md 这个class应用在[容器]上，当分辨率低于992px的时候，使[容器]变为竖向排列。 item-1 item-1 item-1 item-1 flex-sm 这个class应用在[容器]上，当分辨率低于768px的时候，使[容器]变为竖向排列。 item-1 item-1 item-1 item-1 flex-md-hide 这个class应用在[容器]或[栅格]上，当分辨率低于992px的时候，隐藏[栅格]或[容器] item-1 flex-item-8，分辨率低于992px的时候消失 item-1 flex-sm-hide 这个class应用在[容器]或[栅格]上，当分辨率低于768px的时候，隐藏[栅格]或[容器] item-1 item-8，分辨率低于768px的时候消失 item-1 flex-md-show 这个class应用在[容器]或[栅格]上，当分辨率低于992px的时候，显示[栅格]或[容器] item-1 item-1，分辨率低于992px的时候显示 flex-sm-show 这个class应用在[容器]或[栅格]上，当分辨率低于768px的时候，显示[栅格]或[容器] item-1 item-1，分辨率低于768px的时候显示 布局实例: 响应式圣杯布局 main优先显示，宽度低于992px时候main和side-right变为水平排列, side-left隐藏 header main side-left side-right footer Flex弹性布局下载","tags":[{"name":"技术","slug":"技术","permalink":"http://xerduo.com/tags/技术/"}]},{"title":"很有创意的乐队-Walk Off the Earth","date":"2017-03-30T20:02:28.000Z","path":"2017/03/31/分享喜欢的乐队-Walk Off the Earth/","text":"Walk Off the Earth是2006年在加拿大安大略省柏林顿成立的一只另类摇滚、斯卡(ska)、雷鬼摇滚风格的五人乐队 。2012年，他们才华横溢地“五人弹一把吉他”翻唱了Gotye的“Somebody That I Used To Know”，视频上传后引爆网络，在Youtube上两周内获得了超过3500万次的观看。许多粉丝迅速开始收集乐队过去五年的歌曲和视频，并引起了媒体的关注，来自世界各地的粉丝立即爱上了他们的原创音乐和翻唱视频。 Walk Off the Earth 成员 Sarah Joel Ryan Gianni Mike 分享一首好听、有趣的翻唱 - Shape of you 演奏特点Walk off the earth在自制的MV中有多种风格，例如五人合抱一个吉他(“Somebody that I used to know”) 或是大提琴(“Red Hands”) 演奏。他们坐在沙发上，从左到右的分工明确，有弹奏有演唱。能在一个乐器上分多段来弹奏，这需要默契的配合，而且鉴于吉他相对较短的琴弦，五个人必须经过长时间的练习，才能互不干扰，相辅相成，达到创新的演奏目的，这是非常不容易的。 他们还有其他的演奏方法，如接力弹钢琴、用各种各样的乐器、B-box(“I Knew You Were Trouble”)，甚至是通过硬币放入储蓄罐、小铃铛、勺子拍打身体、敲击装了水的酒杯(“Material Girl”) 等等一切能发出声音的方法来作曲。总而言之，他们是一支非常敢于创新的乐队。他们演奏的方往往在人意料之外，给人眼前一亮的感觉。","tags":[{"name":"喜欢","slug":"喜欢","permalink":"http://xerduo.com/tags/喜欢/"},{"name":"随笔","slug":"随笔","permalink":"http://xerduo.com/tags/随笔/"}]},{"title":"Markdown 语法简单说明","date":"2017-03-28T16:39:17.000Z","path":"2017/03/29/Markdown-语法简单说明/","text":"Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。 TipsMarkdown 常用的语法不到十个，基本使用两三遍就可以愉快的排版啦。 Markdown 常用语法这里简单介绍 Markdown 的常用语法，其他语法可以查看 这里 。 强调1、加粗：在需要加粗的文字前后添加 ** 即可。例如，**小耳朵** =&gt; 小耳朵。2、斜体：在需要加粗的文字前后添加 * 即可。例如，*小耳朵* =&gt; 小耳朵 。3、删除线：在需要加粗的文字前后添加 ~~ 即可 例如：~~小耳朵~~ =&gt; 小耳朵。 标题1、一级标题：在需要成为一级标题的文字前添加 # 即可。例如，# 一级标题 。2、二级标题：在需要成为一级标题的文字前添加 ## 即可。例如，## 一级标题 。其他下级标题也是如此，增加 # 的数量即可。 链接形式 ： [名字](链接)。例如 [小耳朵](www.xerduo.com) 显示为 小耳朵 。 引用形式 ： &gt; 引用的文本 。例如 ：&gt; 小耳朵，倾听世界的声音 显示为 小耳朵，倾听世界的声音 图片形式：![](图片链接)例如：![](//upload-images.xerduo.io/upload_images/5392482-eed08926f3945a30.jpg)。 表格形式:```| Column 1 | Column 2 | Column 3 || ——– | ——– | ——– || John | Doe | Male || Mary | Smith | Female |``` 显示： Column 1 Column 2 Column 3 John Doe Male Mary Smith Female 代码显示1、行内代码：在一行文本内显示短代码，例如： ``小耳朵，倾听世界的声音`` 显示：小耳朵，倾听世界的声音 2、区块代码：某一段代码，独立成段，例如 ```&lt;? php&emsp;echo “你好，小耳朵 !”;?&gt;```显示：123&lt;?php echo \"你好，小耳朵 !\";?&gt; 空格半方大的空白&amp;ensp;或&amp;#8194;全方大的空白&amp;emsp;或&amp;#8195;不断行的空白格&amp;nbsp;或&amp;#160; Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： \\&ensp;反斜线`&ensp;反引号*&ensp;星号_&ensp;底线{}&ensp;花括号[]&ensp;方括号()&ensp;括弧 #&ensp;井字号+&ensp;加号-&ensp;减号.&ensp;英文句点!&ensp;惊叹号","tags":[{"name":"技术","slug":"技术","permalink":"http://xerduo.com/tags/技术/"}]}]